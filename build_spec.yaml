version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
    key: "value"

  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands
  vaultVariables:
  #  EXAMPLE_SECRET: "YOUR-SECRET-OCID"
  
  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH parameter set
  exportedVariables:
    - BUILDRUN_HASH

steps:
  - type: Command
    name: "Define unique image tag"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: " $BUILDRUN_HASH
  - type: Command
    timeoutInSeconds: 600
    name: "Install Node Prereqs"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      # install nvm
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      nvm install lts/erbium
      echo "NODE VERSION: $(node -v)"
      echo "NPM VERSION: $(npm -v)"
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root
  
  - type: Command
    timeoutInSeconds: 600
    name: "Install PHP"
    command: |
      yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
      yum install http://rpms.remirepo.net/enterprise/remi-release-8.rpm
      yum install yum-utils
      yum-config-manager --enable remi-php8
      yum install php php-mcrypt php-cli php-gd php-curl php-mysql php-ldap php-zip php-fileinfo
  
  - type: Command
    timeoutInSeconds: 600
    name: "Install PHP Composer"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
      php composer-setup.php --install-dir=bin
      echo "PHP COMPOSER VERSION: $(composer --version)"
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root
  
  # - type: Command
  #   timeoutInSeconds: 600
  #   name: "NPM install"
  #   command: |
  #     cd ${OCI_WORKSPACE_DIR}/node_express
  #     npm install
  #   onFailure:
  #     - type: Command
  #       command: |
  #         echo "Handling Failure"
  #         echo "Failure successfully handled"
  #       timeoutInSeconds: 40
  #       runAs: root
  
  - type: Command
    timeoutInSeconds: 600
    name: "Composer install"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      composer install
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  # - type: Command
  #   timeoutInSeconds: 1200
  #   name: "Run Tests"
  #   command: |
  #     cd ${OCI_WORKSPACE_DIR}/node_express
  #     npm test

  - type: Command
    timeoutInSeconds: 1200
    name: "Build container image"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      docker build --pull --rm -t laravel-cicd-test .
outputArtifacts:
  - name: output01
    type: DOCKER_IMAGE
    # this location tag doesn't effect the tag used to deliver the container image
    # to the Container Registry
    location: laravel-cicd-test:latest
